// src/slices/journalSlice.ts

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the shape of a journal entry
interface JournalEntry {
  id: string; // Unique identifier for the entry
  title: string; // Title of the journal entry
  content: string; // Content or body of the journal entry
  category: string; // Category or type of the journal entry
  date: string; // Date when the journal entry was created or last updated
}

// Define the shape of the journal state
interface JournalState {
  entries: JournalEntry[]; // Array to hold all journal entries
}

// Initial state for the journal slice
const initialState: JournalState = {
  entries: [], // Initially an empty array of entries
};

// Create the journalSlice using createSlice from Redux Toolkit
const journalSlice = createSlice({
  name: 'journal', // Slice name
  initialState, // Initial state defined above
  reducers: {
    // Reducer function for adding a new journal entry
    addEntry: (state, action: PayloadAction<JournalEntry>) => {
      state.entries.push(action.payload); // Add the new entry to the entries array
    },
    // Reducer function for updating an existing journal entry
    updateEntry: (state, action: PayloadAction<JournalEntry>) => {
      // Find the index of the entry to be updated
      const index = state.entries.findIndex(entry => entry.id === action.payload.id);
      if (index !== -1) {
        state.entries[index] = action.payload; // Update the entry if found
      }
    },
    // Reducer function for deleting a journal entry by ID
    deleteEntry: (state, action: PayloadAction<string>) => {
      // Remove the entry with the matching ID from the entries array
      state.entries = state.entries.filter(entry => entry.id !== action.payload);
    },
  },
});

// Export the action creators generated by createSlice
export const { addEntry, updateEntry, deleteEntry } = journalSlice.actions;

// Export the reducer function generated by createSlice
export default journalSlice.reducer;
